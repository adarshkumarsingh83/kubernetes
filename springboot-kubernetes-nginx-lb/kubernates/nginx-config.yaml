apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    user nginx;
    worker_processes  3;
    error_log  /var/log/nginx/error.log;
    events {
      worker_connections  10240;
    }
    http {
      log_format  main
              'remote_addr:$remote_addr\t'
              'time_local:$time_local\t'
              'method:$request_method\t'
              'uri:$request_uri\t'
              'host:$host\t'
              'status:$status\t'
              'bytes_sent:$body_bytes_sent\t'
              'referer:$http_referer\t'
              'useragent:$http_user_agent\t'
              'forwardedfor:$http_x_forwarded_for\t'
              'request_time:$request_time';
      access_log	/var/log/nginx/access.log main;
      # load balancing on multiple employee server running on 8080
            upstream employeeServer {
              server espark-employee-service:8080;
            }

            # load balancing on multiple address server running on 8080
            upstream addressServer {
              server espark-address-service:8080;
            }

            server {
                listen 80;
                  # reverse proxy & load balancing for employee servicers for the url http://localhost/v1/api/employee
                location /v1/api/employee {
                    proxy_redirect off;
                    proxy_pass        http://employeeServer;
                    proxy_set_header  X-Real-IP $remote_addr;
                    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header  Host $http_host;
                    }

                  # reverse proxy & load balancing for employee servicers for the url http://localhost/v1/api/address
                location /v1/api/address {
                    proxy_redirect off;
                    proxy_pass        http://addressServer;
                    proxy_set_header  X-Real-IP $remote_addr;
                    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header  Host $http_host;
                    }
              }
    }